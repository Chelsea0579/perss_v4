{"ast":null,"code":"import { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'PreTest',\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const router = useRouter();\n\n    // 考试数据\n    const examId = computed(() => {\n      const parsedId = parseInt(props.id);\n      return isNaN(parsedId) ? 1 : parsedId; // Default to 1 if invalid\n    });\n    const examData = ref(null);\n    const answers = ref([]);\n    const examCompleted = ref(false);\n    const score = ref(0);\n    const questionScore = ref(10); // 每题10分\n    const wrongQuestions = ref([]);\n\n    // 对话框状态\n    const confirmResetDialog = ref(false);\n    const confirmSubmitDialog = ref(false);\n\n    // 计时器\n    const timeLeft = ref(1800); // 30分钟 = 1800秒\n    let timer = null;\n\n    // 读取考试数据\n    const loadExamData = async () => {\n      const response = await store.dispatch('fetchExam', examId.value);\n      if (response) {\n        examData.value = response;\n        // 初始化答案数组\n        answers.value = new Array(response.questions.length).fill('');\n\n        // 开始计时\n        startTimer();\n      }\n    };\n\n    // 开始计时\n    const startTimer = () => {\n      if (timer) clearInterval(timer);\n      timer = setInterval(() => {\n        if (timeLeft.value > 0) {\n          timeLeft.value--;\n        } else {\n          // 时间到，自动提交\n          clearInterval(timer);\n          if (!examCompleted.value) {\n            submitExam();\n          }\n        }\n      }, 1000);\n    };\n\n    // 格式化时间\n    const formatTime = seconds => {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    };\n\n    // 计算未作答题目数量\n    const unansweredCount = computed(() => {\n      return answers.value.filter(answer => !answer.trim()).length;\n    });\n\n    // 判断是否可以提交\n    const canSubmit = computed(() => {\n      return answers.value.some(answer => answer.trim() !== '');\n    });\n\n    // 确认重置对话框\n    const confirmReset = () => {\n      confirmResetDialog.value = true;\n    };\n\n    // 重置答案\n    const resetAnswers = () => {\n      answers.value = new Array(examData.value.questions.length).fill('');\n      confirmResetDialog.value = false;\n    };\n\n    // 提交前确认\n    const submitExam = () => {\n      confirmSubmitDialog.value = true;\n    };\n\n    // 确认提交\n    const confirmSubmit = async () => {\n      confirmSubmitDialog.value = false;\n\n      // 计算得分\n      let earnedScore = 0;\n      wrongQuestions.value = [];\n      examData.value.questions.forEach((question, index) => {\n        const userAnswer = answers.value[index].trim().toLowerCase();\n        const correctAnswer = question.answer.trim().toLowerCase();\n        if (userAnswer === correctAnswer) {\n          earnedScore += questionScore.value;\n        } else {\n          // 记录错题，格式：examId-questionNumber\n          wrongQuestions.value.push(`${examId.value}-${index + 1}`);\n        }\n      });\n      score.value = earnedScore;\n      examCompleted.value = true;\n\n      // 保存结果到服务器\n      await store.dispatch('submitExamResult', {\n        examId: examId.value,\n        score: score.value,\n        wrongQuestions: wrongQuestions.value\n      });\n\n      // 停止计时器\n      clearInterval(timer);\n    };\n\n    // 判断答案是否正确\n    const isAnswerCorrect = index => {\n      const userAnswer = answers.value[index].trim().toLowerCase();\n      const correctAnswer = examData.value.questions[index].answer.trim().toLowerCase();\n      return userAnswer === correctAnswer;\n    };\n\n    // 组件挂载时\n    onMounted(() => {\n      loadExamData();\n    });\n\n    // 组件卸载前清除计时器\n    onBeforeUnmount(() => {\n      if (timer) {\n        clearInterval(timer);\n      }\n    });\n\n    // 监听路由变化，重新加载考试数据\n    watch(() => props.id, newId => {\n      // examId is already computed, no need to set it\n      examCompleted.value = false;\n      score.value = 0;\n      timeLeft.value = 1800;\n      loadExamData();\n    });\n    return {\n      examId,\n      examData,\n      answers,\n      examCompleted,\n      score,\n      questionScore,\n      wrongQuestions,\n      timeLeft,\n      confirmResetDialog,\n      confirmSubmitDialog,\n      unansweredCount,\n      canSubmit,\n      formatTime,\n      confirmReset,\n      resetAnswers,\n      submitExam,\n      confirmSubmit,\n      isAnswerCorrect,\n      loading: computed(() => store.state.loading)\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","watch","useStore","useRouter","name","props","id","type","String","Number","required","setup","store","router","examId","parsedId","parseInt","isNaN","examData","answers","examCompleted","score","questionScore","wrongQuestions","confirmResetDialog","confirmSubmitDialog","timeLeft","timer","loadExamData","response","dispatch","value","Array","questions","length","fill","startTimer","clearInterval","setInterval","submitExam","formatTime","seconds","minutes","Math","floor","remainingSeconds","toString","padStart","unansweredCount","filter","answer","trim","canSubmit","some","confirmReset","resetAnswers","confirmSubmit","earnedScore","forEach","question","index","userAnswer","toLowerCase","correctAnswer","push","isAnswerCorrect","newId","loading","state"],"sources":["D:\\PycharmProjects\\perss_v4\\frontend\\src\\views\\planning\\PreTest.vue"],"sourcesContent":["<template>\r\n  <div class=\"pre-test\">\r\n    <v-card>\r\n      <v-card-title class=\"text-h5 primary--text d-flex align-center\">\r\n        <v-icon start icon=\"mdi-file-document-outline\"></v-icon>\r\n        阅读前测 - 试卷 {{ id }}\r\n        <v-chip class=\"ml-auto\" color=\"warning\" v-if=\"!examCompleted\">进行中</v-chip>\r\n        <v-chip class=\"ml-auto\" color=\"success\" v-else>已完成</v-chip>\r\n      </v-card-title>\r\n\r\n      <v-card-text v-if=\"!examData\">\r\n        <v-skeleton-loader type=\"article\"></v-skeleton-loader>\r\n      </v-card-text>\r\n\r\n      <template v-else>\r\n        <v-card-text class=\"pb-0\">\r\n          <div class=\"d-flex align-center mb-4\">\r\n            <div>\r\n              <h3 class=\"text-subtitle-1\">剩余时间：</h3>\r\n              <div class=\"text-h6\" :class=\"{'red--text': timeLeft < 300}\">\r\n                {{ formatTime(timeLeft) }}\r\n              </div>\r\n            </div>\r\n\r\n            <v-spacer></v-spacer>\r\n\r\n            <div class=\"text-right\">\r\n              <h3 class=\"text-subtitle-1\">得分：</h3>\r\n              <div class=\"text-h6\">{{ examCompleted ? score : '-' }}/100</div>\r\n            </div>\r\n          </div>\r\n\r\n          <v-divider class=\"mb-4\"></v-divider>\r\n\r\n          <div class=\"reading-passage\">\r\n            <h3 class=\"text-h6 mb-3\">阅读原文</h3>\r\n            <div class=\"reading-content\">{{ examData.content }}</div>\r\n          </div>\r\n        </v-card-text>\r\n\r\n        <v-card-text>\r\n          <h3 class=\"text-h6 mb-3\">题目（共{{ examData.questions.length }}题，每题{{ questionScore }}分）</h3>\r\n\r\n          <div\r\n            v-for=\"(question, index) in examData.questions\"\r\n            :key=\"`question-${index}`\"\r\n            class=\"question-item mb-6\"\r\n          >\r\n            <div class=\"question-header d-flex align-center mb-2\">\r\n              <h4 class=\"text-subtitle-1\">问题 {{ index + 1 }}</h4>\r\n              <v-spacer></v-spacer>\r\n              <v-chip\r\n                v-if=\"examCompleted\"\r\n                :color=\"isAnswerCorrect(index) ? 'success' : 'error'\"\r\n                size=\"small\"\r\n              >\r\n                {{ isAnswerCorrect(index) ? '正确' : '错误' }}\r\n              </v-chip>\r\n            </div>\r\n\r\n            <div class=\"question-content mb-2\">{{ question.question }}</div>\r\n\r\n            <div v-if=\"!examCompleted\">\r\n              <v-text-field\r\n                v-model=\"answers[index]\"\r\n                label=\"请输入您的答案\"\r\n                variant=\"outlined\"\r\n                density=\"comfortable\"\r\n                :disabled=\"examCompleted\"\r\n              ></v-text-field>\r\n            </div>\r\n\r\n            <div v-else class=\"answer-section\">\r\n              <div class=\"d-flex\">\r\n                <div class=\"text-subtitle-2 mr-2\">您的答案：</div>\r\n                <div :class=\"{'text-success': isAnswerCorrect(index), 'text-error': !isAnswerCorrect(index)}\">\r\n                  {{ answers[index] || '未作答' }}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"d-flex mt-2\">\r\n                <div class=\"text-subtitle-2 mr-2\">正确答案：</div>\r\n                <div class=\"text-success\">{{ question.answer }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </v-card-text>\r\n\r\n        <v-divider></v-divider>\r\n\r\n        <v-card-actions>\r\n          <v-btn\r\n            v-if=\"id == 1 && !examCompleted\"\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            @click=\"confirmReset\"\r\n          >\r\n            重置\r\n          </v-btn>\r\n\r\n          <v-spacer></v-spacer>\r\n\r\n          <v-btn\r\n            v-if=\"!examCompleted\"\r\n            color=\"primary\"\r\n            variant=\"flat\"\r\n            :loading=\"loading\"\r\n            :disabled=\"!canSubmit\"\r\n            @click=\"submitExam\"\r\n          >\r\n            提交\r\n          </v-btn>\r\n\r\n          <v-btn\r\n            v-else-if=\"id == 1\"\r\n            color=\"primary\"\r\n            variant=\"flat\"\r\n            :to=\"{ name: 'PreTest', params: { id: 2 } }\"\r\n          >\r\n            下一份试卷\r\n            <v-icon end icon=\"mdi-arrow-right\"></v-icon>\r\n          </v-btn>\r\n\r\n          <v-btn\r\n            v-else\r\n            color=\"primary\"\r\n            variant=\"flat\"\r\n            :to=\"{ name: 'StrategyPreTest' }\"\r\n          >\r\n            继续\r\n            <v-icon end icon=\"mdi-arrow-right\"></v-icon>\r\n          </v-btn>\r\n        </v-card-actions>\r\n      </template>\r\n    </v-card>\r\n\r\n    <!-- 确认对话框 -->\r\n    <v-dialog v-model=\"confirmResetDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>确认重置</v-card-title>\r\n        <v-card-text>\r\n          您确定要重置所有答案吗？此操作不可撤销。\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn variant=\"text\" @click=\"confirmResetDialog = false\">取消</v-btn>\r\n          <v-btn color=\"error\" @click=\"resetAnswers\">确认</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- 提交确认对话框 -->\r\n    <v-dialog v-model=\"confirmSubmitDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>确认提交</v-card-title>\r\n        <v-card-text>\r\n          <p>您确定要提交答案吗？提交后将无法修改。</p>\r\n          <p v-if=\"unansweredCount > 0\" class=\"text-warning\">\r\n            您还有 {{ unansweredCount }} 题未作答。\r\n          </p>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn variant=\"text\" @click=\"confirmSubmitDialog = false\">取消</v-btn>\r\n          <v-btn color=\"primary\" @click=\"confirmSubmit\">确认提交</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: 'PreTest',\r\n\r\n  props: {\r\n    id: {\r\n      type: [String, Number],\r\n      required: true\r\n    }\r\n  },\r\n\r\n  setup(props) {\r\n    const store = useStore();\r\n    const router = useRouter();\r\n\r\n    // 考试数据\r\n    const examId = computed(() => {\r\n      const parsedId = parseInt(props.id);\r\n      return isNaN(parsedId) ? 1 : parsedId; // Default to 1 if invalid\r\n    });\r\n    const examData = ref(null);\r\n    const answers = ref([]);\r\n    const examCompleted = ref(false);\r\n    const score = ref(0);\r\n    const questionScore = ref(10); // 每题10分\r\n    const wrongQuestions = ref([]);\r\n\r\n    // 对话框状态\r\n    const confirmResetDialog = ref(false);\r\n    const confirmSubmitDialog = ref(false);\r\n\r\n    // 计时器\r\n    const timeLeft = ref(1800); // 30分钟 = 1800秒\r\n    let timer = null;\r\n\r\n    // 读取考试数据\r\n    const loadExamData = async () => {\r\n      const response = await store.dispatch('fetchExam', examId.value);\r\n\r\n      if (response) {\r\n        examData.value = response;\r\n        // 初始化答案数组\r\n        answers.value = new Array(response.questions.length).fill('');\r\n\r\n        // 开始计时\r\n        startTimer();\r\n      }\r\n    };\r\n\r\n    // 开始计时\r\n    const startTimer = () => {\r\n      if (timer) clearInterval(timer);\r\n\r\n      timer = setInterval(() => {\r\n        if (timeLeft.value > 0) {\r\n          timeLeft.value--;\r\n        } else {\r\n          // 时间到，自动提交\r\n          clearInterval(timer);\r\n          if (!examCompleted.value) {\r\n            submitExam();\r\n          }\r\n        }\r\n      }, 1000);\r\n    };\r\n\r\n    // 格式化时间\r\n    const formatTime = (seconds) => {\r\n      const minutes = Math.floor(seconds / 60);\r\n      const remainingSeconds = seconds % 60;\r\n      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n    };\r\n\r\n    // 计算未作答题目数量\r\n    const unansweredCount = computed(() => {\r\n      return answers.value.filter(answer => !answer.trim()).length;\r\n    });\r\n\r\n    // 判断是否可以提交\r\n    const canSubmit = computed(() => {\r\n      return answers.value.some(answer => answer.trim() !== '');\r\n    });\r\n\r\n    // 确认重置对话框\r\n    const confirmReset = () => {\r\n      confirmResetDialog.value = true;\r\n    };\r\n\r\n    // 重置答案\r\n    const resetAnswers = () => {\r\n      answers.value = new Array(examData.value.questions.length).fill('');\r\n      confirmResetDialog.value = false;\r\n    };\r\n\r\n    // 提交前确认\r\n    const submitExam = () => {\r\n      confirmSubmitDialog.value = true;\r\n    };\r\n\r\n    // 确认提交\r\n    const confirmSubmit = async () => {\r\n      confirmSubmitDialog.value = false;\r\n\r\n      // 计算得分\r\n      let earnedScore = 0;\r\n      wrongQuestions.value = [];\r\n\r\n      examData.value.questions.forEach((question, index) => {\r\n        const userAnswer = answers.value[index].trim().toLowerCase();\r\n        const correctAnswer = question.answer.trim().toLowerCase();\r\n\r\n        if (userAnswer === correctAnswer) {\r\n          earnedScore += questionScore.value;\r\n        } else {\r\n          // 记录错题，格式：examId-questionNumber\r\n          wrongQuestions.value.push(`${examId.value}-${index + 1}`);\r\n        }\r\n      });\r\n\r\n      score.value = earnedScore;\r\n      examCompleted.value = true;\r\n\r\n      // 保存结果到服务器\r\n      await store.dispatch('submitExamResult', {\r\n        examId: examId.value,\r\n        score: score.value,\r\n        wrongQuestions: wrongQuestions.value\r\n      });\r\n\r\n      // 停止计时器\r\n      clearInterval(timer);\r\n    };\r\n\r\n    // 判断答案是否正确\r\n    const isAnswerCorrect = (index) => {\r\n      const userAnswer = answers.value[index].trim().toLowerCase();\r\n      const correctAnswer = examData.value.questions[index].answer.trim().toLowerCase();\r\n      return userAnswer === correctAnswer;\r\n    };\r\n\r\n    // 组件挂载时\r\n    onMounted(() => {\r\n      loadExamData();\r\n    });\r\n\r\n    // 组件卸载前清除计时器\r\n    onBeforeUnmount(() => {\r\n      if (timer) {\r\n        clearInterval(timer);\r\n      }\r\n    });\r\n\r\n    // 监听路由变化，重新加载考试数据\r\n    watch(() => props.id, (newId) => {\r\n      // examId is already computed, no need to set it\r\n      examCompleted.value = false;\r\n      score.value = 0;\r\n      timeLeft.value = 1800;\r\n      loadExamData();\r\n    });\r\n\r\n    return {\r\n      examId,\r\n      examData,\r\n      answers,\r\n      examCompleted,\r\n      score,\r\n      questionScore,\r\n      wrongQuestions,\r\n      timeLeft,\r\n      confirmResetDialog,\r\n      confirmSubmitDialog,\r\n      unansweredCount,\r\n      canSubmit,\r\n      formatTime,\r\n      confirmReset,\r\n      resetAnswers,\r\n      submitExam,\r\n      confirmSubmit,\r\n      isAnswerCorrect,\r\n      loading: computed(() => store.state.loading)\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pre-test {\r\n  max-width: 100%;\r\n}\r\n\r\n.reading-passage {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.reading-content {\r\n  background-color: #f8f9fa;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n  white-space: pre-line;\r\n  line-height: 1.6;\r\n}\r\n\r\n.question-item {\r\n  border-left: 3px solid #e0e0e0;\r\n  padding-left: 16px;\r\n}\r\n\r\n.text-success {\r\n  color: #4caf50;\r\n}\r\n\r\n.text-error {\r\n  color: #f44336;\r\n}\r\n\r\n.text-warning {\r\n  color: #ff9800;\r\n}\r\n</style>"],"mappings":"AA4KA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,EAAEC,KAAI,QAAS,KAAK;AACtE,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACbC,IAAI,EAAE,SAAS;EAEfC,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAE,CAACC,MAAM,EAAEC,MAAM,CAAC;MACtBC,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDC,KAAKA,CAACN,KAAK,EAAE;IACX,MAAMO,KAAI,GAAIV,QAAQ,CAAC,CAAC;IACxB,MAAMW,MAAK,GAAIV,SAAS,CAAC,CAAC;;IAE1B;IACA,MAAMW,MAAK,GAAIhB,QAAQ,CAAC,MAAM;MAC5B,MAAMiB,QAAO,GAAIC,QAAQ,CAACX,KAAK,CAACC,EAAE,CAAC;MACnC,OAAOW,KAAK,CAACF,QAAQ,IAAI,IAAIA,QAAQ,EAAE;IACzC,CAAC,CAAC;IACF,MAAMG,QAAO,GAAIrB,GAAG,CAAC,IAAI,CAAC;IAC1B,MAAMsB,OAAM,GAAItB,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMuB,aAAY,GAAIvB,GAAG,CAAC,KAAK,CAAC;IAChC,MAAMwB,KAAI,GAAIxB,GAAG,CAAC,CAAC,CAAC;IACpB,MAAMyB,aAAY,GAAIzB,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/B,MAAM0B,cAAa,GAAI1B,GAAG,CAAC,EAAE,CAAC;;IAE9B;IACA,MAAM2B,kBAAiB,GAAI3B,GAAG,CAAC,KAAK,CAAC;IACrC,MAAM4B,mBAAkB,GAAI5B,GAAG,CAAC,KAAK,CAAC;;IAEtC;IACA,MAAM6B,QAAO,GAAI7B,GAAG,CAAC,IAAI,CAAC,EAAE;IAC5B,IAAI8B,KAAI,GAAI,IAAI;;IAEhB;IACA,MAAMC,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,MAAMC,QAAO,GAAI,MAAMjB,KAAK,CAACkB,QAAQ,CAAC,WAAW,EAAEhB,MAAM,CAACiB,KAAK,CAAC;MAEhE,IAAIF,QAAQ,EAAE;QACZX,QAAQ,CAACa,KAAI,GAAIF,QAAQ;QACzB;QACAV,OAAO,CAACY,KAAI,GAAI,IAAIC,KAAK,CAACH,QAAQ,CAACI,SAAS,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;;QAE7D;QACAC,UAAU,CAAC,CAAC;MACd;IACF,CAAC;;IAED;IACA,MAAMA,UAAS,GAAIA,CAAA,KAAM;MACvB,IAAIT,KAAK,EAAEU,aAAa,CAACV,KAAK,CAAC;MAE/BA,KAAI,GAAIW,WAAW,CAAC,MAAM;QACxB,IAAIZ,QAAQ,CAACK,KAAI,GAAI,CAAC,EAAE;UACtBL,QAAQ,CAACK,KAAK,EAAE;QAClB,OAAO;UACL;UACAM,aAAa,CAACV,KAAK,CAAC;UACpB,IAAI,CAACP,aAAa,CAACW,KAAK,EAAE;YACxBQ,UAAU,CAAC,CAAC;UACd;QACF;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;;IAED;IACA,MAAMC,UAAS,GAAKC,OAAO,IAAK;MAC9B,MAAMC,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACH,OAAM,GAAI,EAAE,CAAC;MACxC,MAAMI,gBAAe,GAAIJ,OAAM,GAAI,EAAE;MACrC,OAAO,GAAGC,OAAO,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,gBAAgB,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;IACjG,CAAC;;IAED;IACA,MAAMC,eAAc,GAAIlD,QAAQ,CAAC,MAAM;MACrC,OAAOqB,OAAO,CAACY,KAAK,CAACkB,MAAM,CAACC,MAAK,IAAK,CAACA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAACjB,MAAM;IAC9D,CAAC,CAAC;;IAEF;IACA,MAAMkB,SAAQ,GAAItD,QAAQ,CAAC,MAAM;MAC/B,OAAOqB,OAAO,CAACY,KAAK,CAACsB,IAAI,CAACH,MAAK,IAAKA,MAAM,CAACC,IAAI,CAAC,MAAM,EAAE,CAAC;IAC3D,CAAC,CAAC;;IAEF;IACA,MAAMG,YAAW,GAAIA,CAAA,KAAM;MACzB9B,kBAAkB,CAACO,KAAI,GAAI,IAAI;IACjC,CAAC;;IAED;IACA,MAAMwB,YAAW,GAAIA,CAAA,KAAM;MACzBpC,OAAO,CAACY,KAAI,GAAI,IAAIC,KAAK,CAACd,QAAQ,CAACa,KAAK,CAACE,SAAS,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MACnEX,kBAAkB,CAACO,KAAI,GAAI,KAAK;IAClC,CAAC;;IAED;IACA,MAAMQ,UAAS,GAAIA,CAAA,KAAM;MACvBd,mBAAmB,CAACM,KAAI,GAAI,IAAI;IAClC,CAAC;;IAED;IACA,MAAMyB,aAAY,GAAI,MAAAA,CAAA,KAAY;MAChC/B,mBAAmB,CAACM,KAAI,GAAI,KAAK;;MAEjC;MACA,IAAI0B,WAAU,GAAI,CAAC;MACnBlC,cAAc,CAACQ,KAAI,GAAI,EAAE;MAEzBb,QAAQ,CAACa,KAAK,CAACE,SAAS,CAACyB,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;QACpD,MAAMC,UAAS,GAAI1C,OAAO,CAACY,KAAK,CAAC6B,KAAK,CAAC,CAACT,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;QAC5D,MAAMC,aAAY,GAAIJ,QAAQ,CAACT,MAAM,CAACC,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;QAE1D,IAAID,UAAS,KAAME,aAAa,EAAE;UAChCN,WAAU,IAAKnC,aAAa,CAACS,KAAK;QACpC,OAAO;UACL;UACAR,cAAc,CAACQ,KAAK,CAACiC,IAAI,CAAC,GAAGlD,MAAM,CAACiB,KAAK,IAAI6B,KAAI,GAAI,CAAC,EAAE,CAAC;QAC3D;MACF,CAAC,CAAC;MAEFvC,KAAK,CAACU,KAAI,GAAI0B,WAAW;MACzBrC,aAAa,CAACW,KAAI,GAAI,IAAI;;MAE1B;MACA,MAAMnB,KAAK,CAACkB,QAAQ,CAAC,kBAAkB,EAAE;QACvChB,MAAM,EAAEA,MAAM,CAACiB,KAAK;QACpBV,KAAK,EAAEA,KAAK,CAACU,KAAK;QAClBR,cAAc,EAAEA,cAAc,CAACQ;MACjC,CAAC,CAAC;;MAEF;MACAM,aAAa,CAACV,KAAK,CAAC;IACtB,CAAC;;IAED;IACA,MAAMsC,eAAc,GAAKL,KAAK,IAAK;MACjC,MAAMC,UAAS,GAAI1C,OAAO,CAACY,KAAK,CAAC6B,KAAK,CAAC,CAACT,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;MAC5D,MAAMC,aAAY,GAAI7C,QAAQ,CAACa,KAAK,CAACE,SAAS,CAAC2B,KAAK,CAAC,CAACV,MAAM,CAACC,IAAI,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;MACjF,OAAOD,UAAS,KAAME,aAAa;IACrC,CAAC;;IAED;IACAhE,SAAS,CAAC,MAAM;MACd6B,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC;;IAEF;IACA5B,eAAe,CAAC,MAAM;MACpB,IAAI2B,KAAK,EAAE;QACTU,aAAa,CAACV,KAAK,CAAC;MACtB;IACF,CAAC,CAAC;;IAEF;IACA1B,KAAK,CAAC,MAAMI,KAAK,CAACC,EAAE,EAAG4D,KAAK,IAAK;MAC/B;MACA9C,aAAa,CAACW,KAAI,GAAI,KAAK;MAC3BV,KAAK,CAACU,KAAI,GAAI,CAAC;MACfL,QAAQ,CAACK,KAAI,GAAI,IAAI;MACrBH,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO;MACLd,MAAM;MACNI,QAAQ;MACRC,OAAO;MACPC,aAAa;MACbC,KAAK;MACLC,aAAa;MACbC,cAAc;MACdG,QAAQ;MACRF,kBAAkB;MAClBC,mBAAmB;MACnBuB,eAAe;MACfI,SAAS;MACTZ,UAAU;MACVc,YAAY;MACZC,YAAY;MACZhB,UAAU;MACViB,aAAa;MACbS,eAAe;MACfE,OAAO,EAAErE,QAAQ,CAAC,MAAMc,KAAK,CAACwD,KAAK,CAACD,OAAO;IAC7C,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}