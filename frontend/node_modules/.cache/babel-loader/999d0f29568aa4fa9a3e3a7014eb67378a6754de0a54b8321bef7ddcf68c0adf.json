{"ast":null,"code":"import { createStore } from 'vuex';\nimport api from './api';\nexport default createStore({\n  state: {\n    // 用户信息\n    userName: localStorage.getItem('userName') || '',\n    userProfile: null,\n    // 计划阶段\n    introduction: '',\n    selfRateItems: [],\n    examData: {},\n    strategyItems: [],\n    // 执行阶段\n    profileAnalysis: '',\n    wrongAnswersAnalysis: '',\n    strategySuggestions: '',\n    chatHistory: [],\n    // 反馈阶段\n    finalSummary: '',\n    // 系统状态\n    loading: false,\n    error: null,\n    currentPhase: localStorage.getItem('currentPhase') || 'planning'\n  },\n  getters: {\n    isAuthenticated(state) {\n      return !!state.userName;\n    },\n    getCurrentPhase(state) {\n      return state.currentPhase;\n    },\n    getPhaseProgress(state) {\n      const phases = {\n        planning: ['introduction', 'self-rate', 'user-profile', 'pre-test', 'strategy-pre-test'],\n        execution: ['ai-interaction'],\n        feedback: ['post-test', 'strategy-post-test', 'summary']\n      };\n      return phases[state.currentPhase] || [];\n    }\n  },\n  mutations: {\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    SET_USER_NAME(state, name) {\n      state.userName = name;\n      localStorage.setItem('userName', name);\n    },\n    SET_USER_PROFILE(state, profile) {\n      state.userProfile = profile;\n    },\n    SET_INTRODUCTION(state, text) {\n      state.introduction = text;\n    },\n    SET_SELF_RATE_ITEMS(state, items) {\n      state.selfRateItems = items;\n    },\n    SET_EXAM_DATA(state, {\n      id,\n      data\n    }) {\n      if (!state.examData) {\n        state.examData = {};\n      }\n      state.examData = {\n        ...state.examData,\n        [id]: data\n      };\n    },\n    SET_STRATEGY_ITEMS(state, items) {\n      state.strategyItems = items;\n    },\n    SET_PROFILE_ANALYSIS(state, analysis) {\n      state.profileAnalysis = analysis;\n    },\n    SET_WRONG_ANSWERS_ANALYSIS(state, analysis) {\n      state.wrongAnswersAnalysis = analysis;\n    },\n    SET_STRATEGY_SUGGESTIONS(state, suggestions) {\n      state.strategySuggestions = suggestions;\n    },\n    ADD_CHAT_MESSAGE(state, message) {\n      state.chatHistory.push(message);\n    },\n    SET_FINAL_SUMMARY(state, summary) {\n      state.finalSummary = summary;\n    },\n    SET_CURRENT_PHASE(state, phase) {\n      state.currentPhase = phase;\n      localStorage.setItem('currentPhase', phase);\n    }\n  },\n  actions: {\n    // 计划阶段\n    async fetchIntroduction({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.planning.getIntroduction();\n        console.log('Introduction API响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.content) {\n          commit('SET_INTRODUCTION', response.content);\n        } else if (response && response.success && response.introduction) {\n          commit('SET_INTRODUCTION', response.introduction);\n        } else if (typeof response === 'string') {\n          commit('SET_INTRODUCTION', response);\n        } else if (response && typeof response === 'object') {\n          // 尝试从对象中提取内容\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\n          commit('SET_INTRODUCTION', possibleContent);\n          console.log('从未知格式提取内容:', possibleContent);\n        } else {\n          console.error('未知的API响应格式:', response);\n          commit('SET_ERROR', '获取系统介绍失败');\n        }\n      } catch (error) {\n        console.error('获取系统介绍出错:', error);\n        commit('SET_ERROR', error.message || '获取系统介绍失败');\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchSelfRateItems({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.planning.getSelfRateItems();\n        console.log('SelfRate API响应:', response);\n\n        // 处理不同格式的响应\n        if (Array.isArray(response)) {\n          // 如果直接返回数组\n          commit('SET_SELF_RATE_ITEMS', response);\n        } else if (response && response.items) {\n          // 如果返回包含items字段的对象\n          commit('SET_SELF_RATE_ITEMS', response.items);\n        } else if (response && response.success && response.items) {\n          // 如果返回旧格式\n          commit('SET_SELF_RATE_ITEMS', response.items);\n        } else if (response && typeof response === 'object') {\n          // 尝试从对象中找到可能的数组\n          for (const key in response) {\n            if (Array.isArray(response[key])) {\n              commit('SET_SELF_RATE_ITEMS', response[key]);\n              console.log('从未知格式提取自评量表:', key);\n              break;\n            }\n          }\n        } else {\n          console.error('未知的API响应格式:', response);\n          commit('SET_ERROR', '获取自评量表失败');\n        }\n      } catch (error) {\n        console.error('获取自评量表出错:', error);\n        commit('SET_ERROR', error.message || '获取自评量表失败');\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async createUserProfile({\n      commit\n    }, userData) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.planning.createUserProfile(userData);\n        console.log('创建用户画像响应:', response);\n\n        // 处理不同格式的响应\n        if (response.success === true || response.message && response.message.includes('成功') || !response.error) {\n          commit('SET_USER_NAME', userData.name);\n          return true;\n        } else {\n          commit('SET_ERROR', response.error || response.message || '创建用户画像失败');\n          return false;\n        }\n      } catch (error) {\n        console.error('创建用户画像错误:', error);\n        commit('SET_ERROR', error.message || '创建用户画像失败');\n        return false;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchExam({\n      commit\n    }, examId) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.planning.getExam(examId);\n        console.log(`获取试卷${examId}响应:`, response);\n\n        // 处理不同格式的响应\n        if (response.exam_id || response.content || response.questions) {\n          commit('SET_EXAM_DATA', {\n            id: examId,\n            data: response\n          });\n          return response;\n        } else if (response.success && (response.exam_id || response.content || response.questions)) {\n          commit('SET_EXAM_DATA', {\n            id: examId,\n            data: response\n          });\n          return response;\n        } else {\n          commit('SET_ERROR', `获取试卷${examId}失败`);\n          return null;\n        }\n      } catch (error) {\n        console.error(`获取试卷${examId}错误:`, error);\n        commit('SET_ERROR', error.message || `获取试卷${examId}失败`);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchStrategies({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.planning.getStrategies();\n        console.log('获取策略列表响应:', response);\n\n        // 处理不同格式的响应\n        if (Array.isArray(response)) {\n          commit('SET_STRATEGY_ITEMS', response);\n        } else if (response.items) {\n          commit('SET_STRATEGY_ITEMS', response.items);\n        } else if (response.success && response.items) {\n          commit('SET_STRATEGY_ITEMS', response.items);\n        } else {\n          console.error('未知的API响应格式:', response);\n          commit('SET_ERROR', '获取策略列表失败');\n        }\n      } catch (error) {\n        console.error('获取策略列表错误:', error);\n        commit('SET_ERROR', error.message || '获取策略列表失败');\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async submitExamResult({\n      commit,\n      state\n    }, {\n      examId,\n      score,\n      wrongQuestions\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const result = {\n          name: state.userName,\n          exam_id: examId,\n          score: score,\n          wrong_questions: wrongQuestions\n        };\n        const response = await api.planning.submitExamResult(result);\n        console.log('提交试卷结果响应:', response);\n\n        // 处理不同格式的响应\n        return response.success === true || response.message && response.message.includes('成功') || !response.error;\n      } catch (error) {\n        console.error('提交试卷结果错误:', error);\n        commit('SET_ERROR', error.message || '提交试卷结果失败');\n        return false;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async submitStrategyResult({\n      commit,\n      state\n    }, score) {\n      commit('SET_LOADING', true);\n      try {\n        const result = {\n          name: state.userName,\n          score: score,\n          is_pre_test: true // 默认为前测\n        };\n        const response = await api.planning.submitStrategyResult(result);\n        console.log('提交策略问卷结果响应:', response);\n\n        // 处理不同格式的响应\n        return response.success === true || response.message && response.message.includes('成功') || !response.error;\n      } catch (error) {\n        console.error('提交策略问卷结果错误:', error);\n        commit('SET_ERROR', error.message || '提交策略问卷结果失败');\n        return false;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 执行阶段\n    async fetchUserProfile({\n      commit,\n      state\n    }) {\n      if (!state.userName) return null;\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.execution.getUserProfile(state.userName);\n        console.log('获取用户信息响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.user) {\n          commit('SET_USER_PROFILE', response.user);\n          return response.user;\n        } else if (response && response.success && response.user) {\n          commit('SET_USER_PROFILE', response.user);\n          return response.user;\n        } else if (response && typeof response === 'object' && !response.error) {\n          // 可能直接返回用户对象\n          commit('SET_USER_PROFILE', response);\n          return response;\n        } else {\n          commit('SET_ERROR', '获取用户信息失败');\n          return null;\n        }\n      } catch (error) {\n        console.error('获取用户信息错误:', error);\n        commit('SET_ERROR', error.message || '获取用户信息失败');\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchProfileAnalysis({\n      commit,\n      state\n    }) {\n      if (!state.userName) return '';\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.execution.analyzeProfile(state.userName);\n        console.log('分析用户画像响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.analysis) {\n          commit('SET_PROFILE_ANALYSIS', response.analysis);\n          return response.analysis;\n        } else if (response && response.success && response.analysis) {\n          commit('SET_PROFILE_ANALYSIS', response.analysis);\n          return response.analysis;\n        } else if (typeof response === 'string') {\n          commit('SET_PROFILE_ANALYSIS', response);\n          return response;\n        } else if (response) {\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\n          commit('SET_PROFILE_ANALYSIS', possibleContent);\n          console.log('从未知格式提取内容:', possibleContent);\n          return possibleContent;\n        } else {\n          commit('SET_ERROR', '分析用户画像失败');\n          return '';\n        }\n      } catch (error) {\n        console.error('分析用户画像错误:', error);\n        commit('SET_ERROR', error.message || '分析用户画像失败');\n        return '';\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchWrongAnswersAnalysis({\n      commit,\n      state\n    }) {\n      if (!state.userName) return '';\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.execution.analyzeWrongAnswers(state.userName);\n        console.log('分析错题响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.analysis) {\n          commit('SET_WRONG_ANSWERS_ANALYSIS', response.analysis);\n          return response.analysis;\n        } else if (response && response.success && response.analysis) {\n          commit('SET_WRONG_ANSWERS_ANALYSIS', response.analysis);\n          return response.analysis;\n        } else if (typeof response === 'string') {\n          commit('SET_WRONG_ANSWERS_ANALYSIS', response);\n          return response;\n        } else if (response) {\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\n          commit('SET_WRONG_ANSWERS_ANALYSIS', possibleContent);\n          console.log('从未知格式提取内容:', possibleContent);\n          return possibleContent;\n        } else {\n          commit('SET_ERROR', response && response.error || '分析错题失败');\n          return '';\n        }\n      } catch (error) {\n        console.error('分析错题错误:', error);\n        commit('SET_ERROR', error.message || '分析错题失败');\n        return '';\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchStrategySuggestions({\n      commit,\n      state\n    }) {\n      if (!state.userName) return '';\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.execution.suggestStrategies(state.userName);\n        console.log('获取策略建议响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.suggestions) {\n          commit('SET_STRATEGY_SUGGESTIONS', response.suggestions);\n          return response.suggestions;\n        } else if (response && response.success && response.suggestions) {\n          commit('SET_STRATEGY_SUGGESTIONS', response.suggestions);\n          return response.suggestions;\n        } else if (typeof response === 'string') {\n          commit('SET_STRATEGY_SUGGESTIONS', response);\n          return response;\n        } else if (response) {\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\n          commit('SET_STRATEGY_SUGGESTIONS', possibleContent);\n          console.log('从未知格式提取内容:', possibleContent);\n          return possibleContent;\n        } else {\n          commit('SET_ERROR', response && response.error || '获取策略建议失败');\n          // 设置默认内容，确保界面不空白\n          const defaultSuggestions = `\n# 阅读策略建议\n\n由于系统暂时无法提供个性化的阅读策略建议，以下是一些通用的阅读策略，希望能对您有所帮助：\n\n## 一、扫读技巧 (Skimming)\n\n**目的**：快速获取文章的主要内容和结构。\n\n**方法**：\n1. 阅读标题和副标题\n2. 阅读每段的第一句和最后一句\n3. 注意加粗、斜体等强调内容\n4. 阅读图表和总结段落\n\n## 二、细读技巧 (Intensive Reading)\n\n**目的**：深入理解文章的细节和论点。\n\n**方法**：\n1. 阅读每一个句子\n2. 标记关键词和重要信息\n3. 注意过渡词和逻辑连接词\n4. 思考作者的意图和态度\n\n## 三、SQ3R 方法\n\n1. **Survey**：快速浏览全文\n2. **Question**：提出问题\n3. **Read**：阅读文章\n4. **Recite**：复述内容\n5. **Review**：回顾全文\n\n希望这些通用策略对您有所帮助。如需获取更个性化的建议，请稍后再试。\n          `;\n          commit('SET_STRATEGY_SUGGESTIONS', defaultSuggestions);\n          return defaultSuggestions;\n        }\n      } catch (error) {\n        console.error('获取策略建议错误:', error);\n        commit('SET_ERROR', error.message || '获取策略建议失败');\n\n        // 设置默认内容，确保界面不空白\n        const defaultSuggestions = `\n# 阅读策略建议\n\n由于系统暂时无法提供个性化的阅读策略建议，以下是一些通用的阅读策略，希望能对您有所帮助：\n\n## 一、扫读技巧 (Skimming)\n\n**目的**：快速获取文章的主要内容和结构。\n\n**方法**：\n1. 阅读标题和副标题\n2. 阅读每段的第一句和最后一句\n3. 注意加粗、斜体等强调内容\n4. 阅读图表和总结段落\n\n## 二、细读技巧 (Intensive Reading)\n\n**目的**：深入理解文章的细节和论点。\n\n**方法**：\n1. 阅读每一个句子\n2. 标记关键词和重要信息\n3. 注意过渡词和逻辑连接词\n4. 思考作者的意图和态度\n\n## 三、SQ3R 方法\n\n1. **Survey**：快速浏览全文\n2. **Question**：提出问题\n3. **Read**：阅读文章\n4. **Recite**：复述内容\n5. **Review**：回顾全文\n\n希望这些通用策略对您有所帮助。如需获取更个性化的建议，请稍后再试。\n        `;\n        commit('SET_STRATEGY_SUGGESTIONS', defaultSuggestions);\n        return defaultSuggestions;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async sendChatMessage({\n      commit,\n      state\n    }, message) {\n      if (!state.userName) return null;\n\n      // 添加用户消息到历史\n      const userMessage = {\n        role: 'user',\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      commit('ADD_CHAT_MESSAGE', userMessage);\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.execution.chat(state.userName, message);\n        console.log('发送消息响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.response) {\n          // 添加AI回复到历史\n          const aiMessage = {\n            role: 'assistant',\n            content: response.response,\n            timestamp: new Date().toISOString()\n          };\n          commit('ADD_CHAT_MESSAGE', aiMessage);\n          return aiMessage;\n        } else if (response && response.success && response.response) {\n          const aiMessage = {\n            role: 'assistant',\n            content: response.response,\n            timestamp: new Date().toISOString()\n          };\n          commit('ADD_CHAT_MESSAGE', aiMessage);\n          return aiMessage;\n        } else if (typeof response === 'string') {\n          const aiMessage = {\n            role: 'assistant',\n            content: response,\n            timestamp: new Date().toISOString()\n          };\n          commit('ADD_CHAT_MESSAGE', aiMessage);\n          return aiMessage;\n        } else if (response) {\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\n          const aiMessage = {\n            role: 'assistant',\n            content: possibleContent,\n            timestamp: new Date().toISOString()\n          };\n          commit('ADD_CHAT_MESSAGE', aiMessage);\n          console.log('从未知格式提取内容:', possibleContent);\n          return aiMessage;\n        } else {\n          commit('SET_ERROR', response && response.error || '发送消息失败');\n          return null;\n        }\n      } catch (error) {\n        console.error('发送消息错误:', error);\n        commit('SET_ERROR', error.message || '发送消息失败');\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 反馈阶段\n    async fetchFinalSummary({\n      commit,\n      state\n    }) {\n      if (!state.userName) return '';\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.feedback.getFinalSummary(state.userName);\n        console.log('获取学习总结响应:', response);\n\n        // 处理不同格式的响应\n        if (response && response.summary) {\n          commit('SET_FINAL_SUMMARY', response.summary);\n          return response.summary;\n        } else if (response && response.success && response.summary) {\n          commit('SET_FINAL_SUMMARY', response.summary);\n          return response.summary;\n        } else if (typeof response === 'string') {\n          commit('SET_FINAL_SUMMARY', response);\n          return response;\n        } else if (response) {\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\n          commit('SET_FINAL_SUMMARY', possibleContent);\n          console.log('从未知格式提取内容:', possibleContent);\n          return possibleContent;\n        } else {\n          commit('SET_ERROR', '获取学习总结失败');\n          return '';\n        }\n      } catch (error) {\n        console.error('获取学习总结错误:', error);\n        commit('SET_ERROR', error.message || '获取学习总结失败');\n        return '';\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 系统状态\n    setCurrentPhase({\n      commit\n    }, phase) {\n      commit('SET_CURRENT_PHASE', phase);\n    }\n  }\n});","map":{"version":3,"names":["createStore","api","state","userName","localStorage","getItem","userProfile","introduction","selfRateItems","examData","strategyItems","profileAnalysis","wrongAnswersAnalysis","strategySuggestions","chatHistory","finalSummary","loading","error","currentPhase","getters","isAuthenticated","getCurrentPhase","getPhaseProgress","phases","planning","execution","feedback","mutations","SET_LOADING","SET_ERROR","SET_USER_NAME","name","setItem","SET_USER_PROFILE","profile","SET_INTRODUCTION","text","SET_SELF_RATE_ITEMS","items","SET_EXAM_DATA","id","data","SET_STRATEGY_ITEMS","SET_PROFILE_ANALYSIS","analysis","SET_WRONG_ANSWERS_ANALYSIS","SET_STRATEGY_SUGGESTIONS","suggestions","ADD_CHAT_MESSAGE","message","push","SET_FINAL_SUMMARY","summary","SET_CURRENT_PHASE","phase","actions","fetchIntroduction","commit","response","getIntroduction","console","log","content","success","possibleContent","JSON","stringify","fetchSelfRateItems","getSelfRateItems","Array","isArray","key","createUserProfile","userData","includes","fetchExam","examId","getExam","exam_id","questions","fetchStrategies","getStrategies","submitExamResult","score","wrongQuestions","result","wrong_questions","submitStrategyResult","is_pre_test","fetchUserProfile","getUserProfile","user","fetchProfileAnalysis","analyzeProfile","fetchWrongAnswersAnalysis","analyzeWrongAnswers","fetchStrategySuggestions","suggestStrategies","defaultSuggestions","sendChatMessage","userMessage","role","timestamp","Date","toISOString","chat","aiMessage","fetchFinalSummary","getFinalSummary","setCurrentPhase"],"sources":["D:/PycharmProjects/perss_v4/frontend/src/store.js"],"sourcesContent":["import { createStore } from 'vuex';\r\nimport api from './api';\r\n\r\nexport default createStore({\r\n  state: {\r\n    // 用户信息\r\n    userName: localStorage.getItem('userName') || '',\r\n    userProfile: null,\r\n\r\n    // 计划阶段\r\n    introduction: '',\r\n    selfRateItems: [],\r\n    examData: {},\r\n    strategyItems: [],\r\n\r\n    // 执行阶段\r\n    profileAnalysis: '',\r\n    wrongAnswersAnalysis: '',\r\n    strategySuggestions: '',\r\n    chatHistory: [],\r\n\r\n    // 反馈阶段\r\n    finalSummary: '',\r\n\r\n    // 系统状态\r\n    loading: false,\r\n    error: null,\r\n    currentPhase: localStorage.getItem('currentPhase') || 'planning'\r\n  },\r\n\r\n  getters: {\r\n    isAuthenticated(state) {\r\n      return !!state.userName;\r\n    },\r\n\r\n    getCurrentPhase(state) {\r\n      return state.currentPhase;\r\n    },\r\n\r\n    getPhaseProgress(state) {\r\n      const phases = {\r\n        planning: ['introduction', 'self-rate', 'user-profile', 'pre-test', 'strategy-pre-test'],\r\n        execution: ['ai-interaction'],\r\n        feedback: ['post-test', 'strategy-post-test', 'summary']\r\n      };\r\n\r\n      return phases[state.currentPhase] || [];\r\n    }\r\n  },\r\n\r\n  mutations: {\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading;\r\n    },\r\n\r\n    SET_ERROR(state, error) {\r\n      state.error = error;\r\n    },\r\n\r\n    SET_USER_NAME(state, name) {\r\n      state.userName = name;\r\n      localStorage.setItem('userName', name);\r\n    },\r\n\r\n    SET_USER_PROFILE(state, profile) {\r\n      state.userProfile = profile;\r\n    },\r\n\r\n    SET_INTRODUCTION(state, text) {\r\n      state.introduction = text;\r\n    },\r\n\r\n    SET_SELF_RATE_ITEMS(state, items) {\r\n      state.selfRateItems = items;\r\n    },\r\n\r\n    SET_EXAM_DATA(state, { id, data }) {\r\n      if (!state.examData) {\r\n        state.examData = {};\r\n      }\r\n      state.examData = {\r\n        ...state.examData,\r\n        [id]: data\r\n      };\r\n    },\r\n\r\n    SET_STRATEGY_ITEMS(state, items) {\r\n      state.strategyItems = items;\r\n    },\r\n\r\n    SET_PROFILE_ANALYSIS(state, analysis) {\r\n      state.profileAnalysis = analysis;\r\n    },\r\n\r\n    SET_WRONG_ANSWERS_ANALYSIS(state, analysis) {\r\n      state.wrongAnswersAnalysis = analysis;\r\n    },\r\n\r\n    SET_STRATEGY_SUGGESTIONS(state, suggestions) {\r\n      state.strategySuggestions = suggestions;\r\n    },\r\n\r\n    ADD_CHAT_MESSAGE(state, message) {\r\n      state.chatHistory.push(message);\r\n    },\r\n\r\n    SET_FINAL_SUMMARY(state, summary) {\r\n      state.finalSummary = summary;\r\n    },\r\n\r\n    SET_CURRENT_PHASE(state, phase) {\r\n      state.currentPhase = phase;\r\n      localStorage.setItem('currentPhase', phase);\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 计划阶段\r\n    async fetchIntroduction({ commit }) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.planning.getIntroduction();\r\n        console.log('Introduction API响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.content) {\r\n          commit('SET_INTRODUCTION', response.content);\r\n        }\r\n        else if (response && response.success && response.introduction) {\r\n          commit('SET_INTRODUCTION', response.introduction);\r\n        }\r\n        else if (typeof response === 'string') {\r\n          commit('SET_INTRODUCTION', response);\r\n        }\r\n        else if (response && typeof response === 'object') {\r\n          // 尝试从对象中提取内容\r\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\r\n          commit('SET_INTRODUCTION', possibleContent);\r\n          console.log('从未知格式提取内容:', possibleContent);\r\n        }\r\n        else {\r\n          console.error('未知的API响应格式:', response);\r\n          commit('SET_ERROR', '获取系统介绍失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('获取系统介绍出错:', error);\r\n        commit('SET_ERROR', error.message || '获取系统介绍失败');\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async fetchSelfRateItems({ commit }) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.planning.getSelfRateItems();\r\n        console.log('SelfRate API响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (Array.isArray(response)) {\r\n          // 如果直接返回数组\r\n          commit('SET_SELF_RATE_ITEMS', response);\r\n        }\r\n        else if (response && response.items) {\r\n          // 如果返回包含items字段的对象\r\n          commit('SET_SELF_RATE_ITEMS', response.items);\r\n        }\r\n        else if (response && response.success && response.items) {\r\n          // 如果返回旧格式\r\n          commit('SET_SELF_RATE_ITEMS', response.items);\r\n        }\r\n        else if (response && typeof response === 'object') {\r\n          // 尝试从对象中找到可能的数组\r\n          for (const key in response) {\r\n            if (Array.isArray(response[key])) {\r\n              commit('SET_SELF_RATE_ITEMS', response[key]);\r\n              console.log('从未知格式提取自评量表:', key);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          console.error('未知的API响应格式:', response);\r\n          commit('SET_ERROR', '获取自评量表失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('获取自评量表出错:', error);\r\n        commit('SET_ERROR', error.message || '获取自评量表失败');\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async createUserProfile({ commit }, userData) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.planning.createUserProfile(userData);\r\n        console.log('创建用户画像响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response.success === true ||\r\n            (response.message && response.message.includes('成功')) ||\r\n            !response.error) {\r\n          commit('SET_USER_NAME', userData.name);\r\n          return true;\r\n        } else {\r\n          commit('SET_ERROR', response.error || response.message || '创建用户画像失败');\r\n          return false;\r\n        }\r\n      } catch (error) {\r\n        console.error('创建用户画像错误:', error);\r\n        commit('SET_ERROR', error.message || '创建用户画像失败');\r\n        return false;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async fetchExam({ commit }, examId) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.planning.getExam(examId);\r\n        console.log(`获取试卷${examId}响应:`, response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response.exam_id || response.content || response.questions) {\r\n          commit('SET_EXAM_DATA', { id: examId, data: response });\r\n          return response;\r\n        }\r\n        else if (response.success && (response.exam_id || response.content || response.questions)) {\r\n          commit('SET_EXAM_DATA', { id: examId, data: response });\r\n          return response;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', `获取试卷${examId}失败`);\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error(`获取试卷${examId}错误:`, error);\r\n        commit('SET_ERROR', error.message || `获取试卷${examId}失败`);\r\n        return null;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async fetchStrategies({ commit }) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.planning.getStrategies();\r\n        console.log('获取策略列表响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (Array.isArray(response)) {\r\n          commit('SET_STRATEGY_ITEMS', response);\r\n        }\r\n        else if (response.items) {\r\n          commit('SET_STRATEGY_ITEMS', response.items);\r\n        }\r\n        else if (response.success && response.items) {\r\n          commit('SET_STRATEGY_ITEMS', response.items);\r\n        }\r\n        else {\r\n          console.error('未知的API响应格式:', response);\r\n          commit('SET_ERROR', '获取策略列表失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('获取策略列表错误:', error);\r\n        commit('SET_ERROR', error.message || '获取策略列表失败');\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async submitExamResult({ commit, state }, { examId, score, wrongQuestions }) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const result = {\r\n          name: state.userName,\r\n          exam_id: examId,\r\n          score: score,\r\n          wrong_questions: wrongQuestions\r\n        };\r\n\r\n        const response = await api.planning.submitExamResult(result);\r\n        console.log('提交试卷结果响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        return response.success === true ||\r\n               (response.message && response.message.includes('成功')) ||\r\n               !response.error;\r\n      } catch (error) {\r\n        console.error('提交试卷结果错误:', error);\r\n        commit('SET_ERROR', error.message || '提交试卷结果失败');\r\n        return false;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async submitStrategyResult({ commit, state }, score) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const result = {\r\n          name: state.userName,\r\n          score: score,\r\n          is_pre_test: true // 默认为前测\r\n        };\r\n\r\n        const response = await api.planning.submitStrategyResult(result);\r\n        console.log('提交策略问卷结果响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        return response.success === true ||\r\n               (response.message && response.message.includes('成功')) ||\r\n               !response.error;\r\n      } catch (error) {\r\n        console.error('提交策略问卷结果错误:', error);\r\n        commit('SET_ERROR', error.message || '提交策略问卷结果失败');\r\n        return false;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    // 执行阶段\r\n    async fetchUserProfile({ commit, state }) {\r\n      if (!state.userName) return null;\r\n\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.execution.getUserProfile(state.userName);\r\n        console.log('获取用户信息响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.user) {\r\n          commit('SET_USER_PROFILE', response.user);\r\n          return response.user;\r\n        }\r\n        else if (response && response.success && response.user) {\r\n          commit('SET_USER_PROFILE', response.user);\r\n          return response.user;\r\n        }\r\n        else if (response && typeof response === 'object' && !response.error) {\r\n          // 可能直接返回用户对象\r\n          commit('SET_USER_PROFILE', response);\r\n          return response;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', '获取用户信息失败');\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取用户信息错误:', error);\r\n        commit('SET_ERROR', error.message || '获取用户信息失败');\r\n        return null;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async fetchProfileAnalysis({ commit, state }) {\r\n      if (!state.userName) return '';\r\n\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.execution.analyzeProfile(state.userName);\r\n        console.log('分析用户画像响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.analysis) {\r\n          commit('SET_PROFILE_ANALYSIS', response.analysis);\r\n          return response.analysis;\r\n        }\r\n        else if (response && response.success && response.analysis) {\r\n          commit('SET_PROFILE_ANALYSIS', response.analysis);\r\n          return response.analysis;\r\n        }\r\n        else if (typeof response === 'string') {\r\n          commit('SET_PROFILE_ANALYSIS', response);\r\n          return response;\r\n        }\r\n        else if (response) {\r\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\r\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\r\n          commit('SET_PROFILE_ANALYSIS', possibleContent);\r\n          console.log('从未知格式提取内容:', possibleContent);\r\n          return possibleContent;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', '分析用户画像失败');\r\n          return '';\r\n        }\r\n      } catch (error) {\r\n        console.error('分析用户画像错误:', error);\r\n        commit('SET_ERROR', error.message || '分析用户画像失败');\r\n        return '';\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async fetchWrongAnswersAnalysis({ commit, state }) {\r\n      if (!state.userName) return '';\r\n\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.execution.analyzeWrongAnswers(state.userName);\r\n        console.log('分析错题响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.analysis) {\r\n          commit('SET_WRONG_ANSWERS_ANALYSIS', response.analysis);\r\n          return response.analysis;\r\n        }\r\n        else if (response && response.success && response.analysis) {\r\n          commit('SET_WRONG_ANSWERS_ANALYSIS', response.analysis);\r\n          return response.analysis;\r\n        }\r\n        else if (typeof response === 'string') {\r\n          commit('SET_WRONG_ANSWERS_ANALYSIS', response);\r\n          return response;\r\n        }\r\n        else if (response) {\r\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\r\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\r\n          commit('SET_WRONG_ANSWERS_ANALYSIS', possibleContent);\r\n          console.log('从未知格式提取内容:', possibleContent);\r\n          return possibleContent;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', response && response.error || '分析错题失败');\r\n          return '';\r\n        }\r\n      } catch (error) {\r\n        console.error('分析错题错误:', error);\r\n        commit('SET_ERROR', error.message || '分析错题失败');\r\n        return '';\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async fetchStrategySuggestions({ commit, state }) {\r\n      if (!state.userName) return '';\r\n\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.execution.suggestStrategies(state.userName);\r\n        console.log('获取策略建议响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.suggestions) {\r\n          commit('SET_STRATEGY_SUGGESTIONS', response.suggestions);\r\n          return response.suggestions;\r\n        }\r\n        else if (response && response.success && response.suggestions) {\r\n          commit('SET_STRATEGY_SUGGESTIONS', response.suggestions);\r\n          return response.suggestions;\r\n        }\r\n        else if (typeof response === 'string') {\r\n          commit('SET_STRATEGY_SUGGESTIONS', response);\r\n          return response;\r\n        }\r\n        else if (response) {\r\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\r\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\r\n          commit('SET_STRATEGY_SUGGESTIONS', possibleContent);\r\n          console.log('从未知格式提取内容:', possibleContent);\r\n          return possibleContent;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', response && response.error || '获取策略建议失败');\r\n          // 设置默认内容，确保界面不空白\r\n          const defaultSuggestions = `\r\n# 阅读策略建议\r\n\r\n由于系统暂时无法提供个性化的阅读策略建议，以下是一些通用的阅读策略，希望能对您有所帮助：\r\n\r\n## 一、扫读技巧 (Skimming)\r\n\r\n**目的**：快速获取文章的主要内容和结构。\r\n\r\n**方法**：\r\n1. 阅读标题和副标题\r\n2. 阅读每段的第一句和最后一句\r\n3. 注意加粗、斜体等强调内容\r\n4. 阅读图表和总结段落\r\n\r\n## 二、细读技巧 (Intensive Reading)\r\n\r\n**目的**：深入理解文章的细节和论点。\r\n\r\n**方法**：\r\n1. 阅读每一个句子\r\n2. 标记关键词和重要信息\r\n3. 注意过渡词和逻辑连接词\r\n4. 思考作者的意图和态度\r\n\r\n## 三、SQ3R 方法\r\n\r\n1. **Survey**：快速浏览全文\r\n2. **Question**：提出问题\r\n3. **Read**：阅读文章\r\n4. **Recite**：复述内容\r\n5. **Review**：回顾全文\r\n\r\n希望这些通用策略对您有所帮助。如需获取更个性化的建议，请稍后再试。\r\n          `;\r\n          commit('SET_STRATEGY_SUGGESTIONS', defaultSuggestions);\r\n          return defaultSuggestions;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取策略建议错误:', error);\r\n        commit('SET_ERROR', error.message || '获取策略建议失败');\r\n        \r\n        // 设置默认内容，确保界面不空白\r\n        const defaultSuggestions = `\r\n# 阅读策略建议\r\n\r\n由于系统暂时无法提供个性化的阅读策略建议，以下是一些通用的阅读策略，希望能对您有所帮助：\r\n\r\n## 一、扫读技巧 (Skimming)\r\n\r\n**目的**：快速获取文章的主要内容和结构。\r\n\r\n**方法**：\r\n1. 阅读标题和副标题\r\n2. 阅读每段的第一句和最后一句\r\n3. 注意加粗、斜体等强调内容\r\n4. 阅读图表和总结段落\r\n\r\n## 二、细读技巧 (Intensive Reading)\r\n\r\n**目的**：深入理解文章的细节和论点。\r\n\r\n**方法**：\r\n1. 阅读每一个句子\r\n2. 标记关键词和重要信息\r\n3. 注意过渡词和逻辑连接词\r\n4. 思考作者的意图和态度\r\n\r\n## 三、SQ3R 方法\r\n\r\n1. **Survey**：快速浏览全文\r\n2. **Question**：提出问题\r\n3. **Read**：阅读文章\r\n4. **Recite**：复述内容\r\n5. **Review**：回顾全文\r\n\r\n希望这些通用策略对您有所帮助。如需获取更个性化的建议，请稍后再试。\r\n        `;\r\n        commit('SET_STRATEGY_SUGGESTIONS', defaultSuggestions);\r\n        return defaultSuggestions;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    async sendChatMessage({ commit, state }, message) {\r\n      if (!state.userName) return null;\r\n\r\n      // 添加用户消息到历史\r\n      const userMessage = {\r\n        role: 'user',\r\n        content: message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit('ADD_CHAT_MESSAGE', userMessage);\r\n\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.execution.chat(state.userName, message);\r\n        console.log('发送消息响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.response) {\r\n          // 添加AI回复到历史\r\n          const aiMessage = {\r\n            role: 'assistant',\r\n            content: response.response,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n          commit('ADD_CHAT_MESSAGE', aiMessage);\r\n          return aiMessage;\r\n        }\r\n        else if (response && response.success && response.response) {\r\n          const aiMessage = {\r\n            role: 'assistant',\r\n            content: response.response,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n          commit('ADD_CHAT_MESSAGE', aiMessage);\r\n          return aiMessage;\r\n        }\r\n        else if (typeof response === 'string') {\r\n          const aiMessage = {\r\n            role: 'assistant',\r\n            content: response,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n          commit('ADD_CHAT_MESSAGE', aiMessage);\r\n          return aiMessage;\r\n        }\r\n        else if (response) {\r\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\r\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\r\n          const aiMessage = {\r\n            role: 'assistant',\r\n            content: possibleContent,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n          commit('ADD_CHAT_MESSAGE', aiMessage);\r\n          console.log('从未知格式提取内容:', possibleContent);\r\n          return aiMessage;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', response && response.error || '发送消息失败');\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error('发送消息错误:', error);\r\n        commit('SET_ERROR', error.message || '发送消息失败');\r\n        return null;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    // 反馈阶段\r\n    async fetchFinalSummary({ commit, state }) {\r\n      if (!state.userName) return '';\r\n\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await api.feedback.getFinalSummary(state.userName);\r\n        console.log('获取学习总结响应:', response);\r\n\r\n        // 处理不同格式的响应\r\n        if (response && response.summary) {\r\n          commit('SET_FINAL_SUMMARY', response.summary);\r\n          return response.summary;\r\n        }\r\n        else if (response && response.success && response.summary) {\r\n          commit('SET_FINAL_SUMMARY', response.summary);\r\n          return response.summary;\r\n        }\r\n        else if (typeof response === 'string') {\r\n          commit('SET_FINAL_SUMMARY', response);\r\n          return response;\r\n        }\r\n        else if (response) {\r\n          // 如果响应存在但格式不符合预期，尝试提取可能的内容\r\n          const possibleContent = response.text || response.data || response.message || JSON.stringify(response);\r\n          commit('SET_FINAL_SUMMARY', possibleContent);\r\n          console.log('从未知格式提取内容:', possibleContent);\r\n          return possibleContent;\r\n        }\r\n        else {\r\n          commit('SET_ERROR', '获取学习总结失败');\r\n          return '';\r\n        }\r\n      } catch (error) {\r\n        console.error('获取学习总结错误:', error);\r\n        commit('SET_ERROR', error.message || '获取学习总结失败');\r\n        return '';\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n\r\n    // 系统状态\r\n    setCurrentPhase({ commit }, phase) {\r\n      commit('SET_CURRENT_PHASE', phase);\r\n    }\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}