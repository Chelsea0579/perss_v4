{"ast":null,"code":"import axios from 'axios';\n\n// 确定当前环境\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// 创建axios实例\nconst api = axios.create({\n  // 在开发环境中使用相对路径，让Vue代理处理\n  // 在生产环境中使用完整URL\n  baseURL: isDevelopment ? '/api' : 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000 // 30秒超时\n});\n\n// 创建具有更长超时时间的axios实例，用于AI相关操作\nconst aiApi = axios.create({\n  baseURL: isDevelopment ? '/api' : 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 130000 // 60秒超时，AI操作需要更长时间\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  console.log(`发送请求: ${config.method.toUpperCase()} ${config.url}`, config);\n  return config;\n}, error => {\n  console.error('请求配置错误:', error);\n  return Promise.reject(error);\n});\n\n// AI API的请求拦截器\naiApi.interceptors.request.use(config => {\n  console.log(`发送AI请求: ${config.method.toUpperCase()} ${config.url}`, config);\n  return config;\n}, error => {\n  console.error('AI请求配置错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log(`收到响应: ${response.config.url}, 状态: ${response.status}`);\n  return response.data;\n}, error => {\n  if (error.response) {\n    // 服务器返回了错误响应\n    console.error(`API错误: ${error.response.status} - ${error.response.statusText}`);\n    console.error('完整错误对象:', error);\n  } else if (error.request) {\n    // 请求已发送但没有收到响应\n    console.error('API错误: 没有收到服务器响应，请检查后端服务是否运行');\n    console.error('请求对象:', error.request);\n  } else {\n    // 请求配置出错\n    console.error('API错误:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// AI API的响应拦截器\naiApi.interceptors.response.use(response => {\n  console.log(`收到AI响应: ${response.config.url}, 状态: ${response.status}`);\n  return response.data;\n}, error => {\n  if (error.response) {\n    // 服务器返回了错误响应\n    console.error(`AI API错误: ${error.response.status} - ${error.response.statusText}`);\n    console.error('完整错误对象:', error);\n  } else if (error.request) {\n    // 请求已发送但没有收到响应\n    console.error('AI API错误: 没有收到服务器响应，请检查后端服务是否运行');\n    console.error('请求对象:', error.request);\n  } else {\n    // 请求配置出错\n    console.error('AI API错误:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// 计划阶段API\nconst planningApi = {\n  // 获取系统介绍\n  getIntroduction: () => api.get('/introduction'),\n  // 获取自评量表\n  getSelfRateItems: () => api.get('/self-rate'),\n  // 创建用户画像\n  createUserProfile: userData => {\n    console.log('准备发送的用户画像数据:', userData);\n    return api.post('/user-profile', userData);\n  },\n  // 获取试卷\n  getExam: examId => api.get(`/exam/${examId}`),\n  // 获取策略列表\n  getStrategies: () => api.get('/strategies'),\n  // 提交试卷结果\n  submitExamResult: result => api.post('/exam-result', result),\n  // 提交策略问卷结果\n  submitStrategyResult: result => api.post('/strategy-result', result)\n};\n\n// 执行阶段API\nconst executionApi = {\n  // 获取用户信息\n  getUserProfile: userName => api.get(`/user/${userName}`),\n  // 分析用户画像\n  analyzeProfile: userName => aiApi.get(`/analyze-profile/${userName}`),\n  // 分析错题\n  analyzeWrongAnswers: userName => aiApi.get(`/analyze-wrong-answers/${userName}`),\n  // 推荐策略\n  suggestStrategies: userName => aiApi.get(`/suggest-strategies/${userName}`),\n  // 聊天\n  chat: (userName, message) => aiApi.post('/chat', {\n    name: userName,\n    message\n  })\n};\n\n// 反馈阶段API\nconst feedbackApi = {\n  // 获取学习总结\n  getFinalSummary: userName => aiApi.get(`/final-summary/${userName}`)\n};\n\n// 调试API - 开发环境使用\nconst debugApi = {\n  // 测试API是否可用\n  testConnection: () => {\n    const urls = ['/introduction', '/self-rate', '/strategies'];\n\n    // 显示所有API请求路径\n    console.log('API基础URL:', api.defaults.baseURL);\n    urls.forEach(url => {\n      console.log('可用API路径:', api.defaults.baseURL + url);\n    });\n\n    // 尝试请求系统介绍接口测试连接\n    return api.get('/introduction').then(response => {\n      console.log('API连接测试成功:', response);\n      return {\n        success: true,\n        message: 'API连接成功',\n        data: response\n      };\n    }).catch(error => {\n      console.error('API连接测试失败:', error);\n      return {\n        success: false,\n        message: `API连接失败: ${error.message}`\n      };\n    });\n  }\n};\n\n// 导出所有API\nexport default {\n  planning: planningApi,\n  execution: executionApi,\n  feedback: feedbackApi,\n  debug: debugApi\n};","map":{"version":3,"names":["axios","isDevelopment","process","env","NODE_ENV","api","create","baseURL","headers","timeout","aiApi","interceptors","request","use","config","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","statusText","message","planningApi","getIntroduction","get","getSelfRateItems","createUserProfile","userData","post","getExam","examId","getStrategies","submitExamResult","result","submitStrategyResult","executionApi","getUserProfile","userName","analyzeProfile","analyzeWrongAnswers","suggestStrategies","chat","name","feedbackApi","getFinalSummary","debugApi","testConnection","urls","defaults","forEach","then","success","catch","planning","execution","feedback","debug"],"sources":["D:/PycharmProjects/perss_v4/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios';\n\n// 确定当前环境\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// 创建axios实例\nconst api = axios.create({\n  // 在开发环境中使用相对路径，让Vue代理处理\n  // 在生产环境中使用完整URL\n  baseURL: isDevelopment ? '/api' : 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000 // 30秒超时\n});\n\n// 创建具有更长超时时间的axios实例，用于AI相关操作\nconst aiApi = axios.create({\n  baseURL: isDevelopment ? '/api' : 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 130000 // 60秒超时，AI操作需要更长时间\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  config => {\n    console.log(`发送请求: ${config.method.toUpperCase()} ${config.url}`, config);\n    return config;\n  },\n  error => {\n    console.error('请求配置错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// AI API的请求拦截器\naiApi.interceptors.request.use(\n  config => {\n    console.log(`发送AI请求: ${config.method.toUpperCase()} ${config.url}`, config);\n    return config;\n  },\n  error => {\n    console.error('AI请求配置错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  response => {\n    console.log(`收到响应: ${response.config.url}, 状态: ${response.status}`);\n    return response.data;\n  },\n  error => {\n    if (error.response) {\n      // 服务器返回了错误响应\n      console.error(`API错误: ${error.response.status} - ${error.response.statusText}`);\n      console.error('完整错误对象:', error);\n    } else if (error.request) {\n      // 请求已发送但没有收到响应\n      console.error('API错误: 没有收到服务器响应，请检查后端服务是否运行');\n      console.error('请求对象:', error.request);\n    } else {\n      // 请求配置出错\n      console.error('API错误:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// AI API的响应拦截器\naiApi.interceptors.response.use(\n  response => {\n    console.log(`收到AI响应: ${response.config.url}, 状态: ${response.status}`);\n    return response.data;\n  },\n  error => {\n    if (error.response) {\n      // 服务器返回了错误响应\n      console.error(`AI API错误: ${error.response.status} - ${error.response.statusText}`);\n      console.error('完整错误对象:', error);\n    } else if (error.request) {\n      // 请求已发送但没有收到响应\n      console.error('AI API错误: 没有收到服务器响应，请检查后端服务是否运行');\n      console.error('请求对象:', error.request);\n    } else {\n      // 请求配置出错\n      console.error('AI API错误:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 计划阶段API\nconst planningApi = {\n  // 获取系统介绍\n  getIntroduction: () => api.get('/introduction'),\n\n  // 获取自评量表\n  getSelfRateItems: () => api.get('/self-rate'),\n\n  // 创建用户画像\n  createUserProfile: (userData) => {\n    console.log('准备发送的用户画像数据:', userData);\n    return api.post('/user-profile', userData);\n  },\n\n  // 获取试卷\n  getExam: (examId) => api.get(`/exam/${examId}`),\n\n  // 获取策略列表\n  getStrategies: () => api.get('/strategies'),\n\n  // 提交试卷结果\n  submitExamResult: (result) => api.post('/exam-result', result),\n\n  // 提交策略问卷结果\n  submitStrategyResult: (result) => api.post('/strategy-result', result),\n};\n\n// 执行阶段API\nconst executionApi = {\n  // 获取用户信息\n  getUserProfile: (userName) => api.get(`/user/${userName}`),\n\n  // 分析用户画像\n  analyzeProfile: (userName) => aiApi.get(`/analyze-profile/${userName}`),\n\n  // 分析错题\n  analyzeWrongAnswers: (userName) => aiApi.get(`/analyze-wrong-answers/${userName}`),\n\n  // 推荐策略\n  suggestStrategies: (userName) => aiApi.get(`/suggest-strategies/${userName}`),\n\n  // 聊天\n  chat: (userName, message) => aiApi.post('/chat', { name: userName, message })\n};\n\n// 反馈阶段API\nconst feedbackApi = {\n  // 获取学习总结\n  getFinalSummary: (userName) => aiApi.get(`/final-summary/${userName}`)\n};\n\n// 调试API - 开发环境使用\nconst debugApi = {\n  // 测试API是否可用\n  testConnection: () => {\n    const urls = [\n      '/introduction',\n      '/self-rate',\n      '/strategies'\n    ];\n    \n    // 显示所有API请求路径\n    console.log('API基础URL:', api.defaults.baseURL);\n    urls.forEach(url => {\n      console.log('可用API路径:', api.defaults.baseURL + url);\n    });\n    \n    // 尝试请求系统介绍接口测试连接\n    return api.get('/introduction')\n      .then(response => {\n        console.log('API连接测试成功:', response);\n        return {success: true, message: 'API连接成功', data: response};\n      })\n      .catch(error => {\n        console.error('API连接测试失败:', error);\n        return {success: false, message: `API连接失败: ${error.message}`};\n      });\n  }\n};\n\n// 导出所有API\nexport default {\n  planning: planningApi,\n  execution: executionApi,\n  feedback: feedbackApi,\n  debug: debugApi\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;;AAE5D;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvB;EACA;EACAC,OAAO,EAAEN,aAAa,GAAG,MAAM,GAAG,2BAA2B;EAC7DO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,KAAK,CAAC;AACjB,CAAC,CAAC;;AAEF;AACA,MAAMC,KAAK,GAAGV,KAAK,CAACM,MAAM,CAAC;EACzBC,OAAO,EAAEN,aAAa,GAAG,MAAM,GAAG,2BAA2B;EAC7DO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,MAAM,CAAC;AAClB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACRC,OAAO,CAACC,GAAG,CAAC,SAASF,MAAM,CAACG,MAAM,CAACC,WAAW,CAAC,CAAC,IAAIJ,MAAM,CAACK,GAAG,EAAE,EAAEL,MAAM,CAAC;EACzE,OAAOA,MAAM;AACf,CAAC,EACDM,KAAK,IAAI;EACPL,OAAO,CAACK,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;EAC/B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAV,KAAK,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACRC,OAAO,CAACC,GAAG,CAAC,WAAWF,MAAM,CAACG,MAAM,CAACC,WAAW,CAAC,CAAC,IAAIJ,MAAM,CAACK,GAAG,EAAE,EAAEL,MAAM,CAAC;EAC3E,OAAOA,MAAM;AACf,CAAC,EACDM,KAAK,IAAI;EACPL,OAAO,CAACK,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;EACjC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACM,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC3BU,QAAQ,IAAI;EACVR,OAAO,CAACC,GAAG,CAAC,SAASO,QAAQ,CAACT,MAAM,CAACK,GAAG,SAASI,QAAQ,CAACC,MAAM,EAAE,CAAC;EACnE,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC,EACDL,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACAR,OAAO,CAACK,KAAK,CAAC,UAAUA,KAAK,CAACG,QAAQ,CAACC,MAAM,MAAMJ,KAAK,CAACG,QAAQ,CAACG,UAAU,EAAE,CAAC;IAC/EX,OAAO,CAACK,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;EACjC,CAAC,MAAM,IAAIA,KAAK,CAACR,OAAO,EAAE;IACxB;IACAG,OAAO,CAACK,KAAK,CAAC,8BAA8B,CAAC;IAC7CL,OAAO,CAACK,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACR,OAAO,CAAC;EACvC,CAAC,MAAM;IACL;IACAG,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACO,OAAO,CAAC;EACxC;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAV,KAAK,CAACC,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC7BU,QAAQ,IAAI;EACVR,OAAO,CAACC,GAAG,CAAC,WAAWO,QAAQ,CAACT,MAAM,CAACK,GAAG,SAASI,QAAQ,CAACC,MAAM,EAAE,CAAC;EACrE,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC,EACDL,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACAR,OAAO,CAACK,KAAK,CAAC,aAAaA,KAAK,CAACG,QAAQ,CAACC,MAAM,MAAMJ,KAAK,CAACG,QAAQ,CAACG,UAAU,EAAE,CAAC;IAClFX,OAAO,CAACK,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;EACjC,CAAC,MAAM,IAAIA,KAAK,CAACR,OAAO,EAAE;IACxB;IACAG,OAAO,CAACK,KAAK,CAAC,iCAAiC,CAAC;IAChDL,OAAO,CAACK,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACR,OAAO,CAAC;EACvC,CAAC,MAAM;IACL;IACAG,OAAO,CAACK,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACO,OAAO,CAAC;EAC3C;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMQ,WAAW,GAAG;EAClB;EACAC,eAAe,EAAEA,CAAA,KAAMxB,GAAG,CAACyB,GAAG,CAAC,eAAe,CAAC;EAE/C;EACAC,gBAAgB,EAAEA,CAAA,KAAM1B,GAAG,CAACyB,GAAG,CAAC,YAAY,CAAC;EAE7C;EACAE,iBAAiB,EAAGC,QAAQ,IAAK;IAC/BlB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEiB,QAAQ,CAAC;IACrC,OAAO5B,GAAG,CAAC6B,IAAI,CAAC,eAAe,EAAED,QAAQ,CAAC;EAC5C,CAAC;EAED;EACAE,OAAO,EAAGC,MAAM,IAAK/B,GAAG,CAACyB,GAAG,CAAC,SAASM,MAAM,EAAE,CAAC;EAE/C;EACAC,aAAa,EAAEA,CAAA,KAAMhC,GAAG,CAACyB,GAAG,CAAC,aAAa,CAAC;EAE3C;EACAQ,gBAAgB,EAAGC,MAAM,IAAKlC,GAAG,CAAC6B,IAAI,CAAC,cAAc,EAAEK,MAAM,CAAC;EAE9D;EACAC,oBAAoB,EAAGD,MAAM,IAAKlC,GAAG,CAAC6B,IAAI,CAAC,kBAAkB,EAAEK,MAAM;AACvE,CAAC;;AAED;AACA,MAAME,YAAY,GAAG;EACnB;EACAC,cAAc,EAAGC,QAAQ,IAAKtC,GAAG,CAACyB,GAAG,CAAC,SAASa,QAAQ,EAAE,CAAC;EAE1D;EACAC,cAAc,EAAGD,QAAQ,IAAKjC,KAAK,CAACoB,GAAG,CAAC,oBAAoBa,QAAQ,EAAE,CAAC;EAEvE;EACAE,mBAAmB,EAAGF,QAAQ,IAAKjC,KAAK,CAACoB,GAAG,CAAC,0BAA0Ba,QAAQ,EAAE,CAAC;EAElF;EACAG,iBAAiB,EAAGH,QAAQ,IAAKjC,KAAK,CAACoB,GAAG,CAAC,uBAAuBa,QAAQ,EAAE,CAAC;EAE7E;EACAI,IAAI,EAAEA,CAACJ,QAAQ,EAAEhB,OAAO,KAAKjB,KAAK,CAACwB,IAAI,CAAC,OAAO,EAAE;IAAEc,IAAI,EAAEL,QAAQ;IAAEhB;EAAQ,CAAC;AAC9E,CAAC;;AAED;AACA,MAAMsB,WAAW,GAAG;EAClB;EACAC,eAAe,EAAGP,QAAQ,IAAKjC,KAAK,CAACoB,GAAG,CAAC,kBAAkBa,QAAQ,EAAE;AACvE,CAAC;;AAED;AACA,MAAMQ,QAAQ,GAAG;EACf;EACAC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAG,CACX,eAAe,EACf,YAAY,EACZ,aAAa,CACd;;IAED;IACAtC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEX,GAAG,CAACiD,QAAQ,CAAC/C,OAAO,CAAC;IAC9C8C,IAAI,CAACE,OAAO,CAACpC,GAAG,IAAI;MAClBJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEX,GAAG,CAACiD,QAAQ,CAAC/C,OAAO,GAAGY,GAAG,CAAC;IACrD,CAAC,CAAC;;IAEF;IACA,OAAOd,GAAG,CAACyB,GAAG,CAAC,eAAe,CAAC,CAC5B0B,IAAI,CAACjC,QAAQ,IAAI;MAChBR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,QAAQ,CAAC;MACnC,OAAO;QAACkC,OAAO,EAAE,IAAI;QAAE9B,OAAO,EAAE,SAAS;QAAEF,IAAI,EAAEF;MAAQ,CAAC;IAC5D,CAAC,CAAC,CACDmC,KAAK,CAACtC,KAAK,IAAI;MACdL,OAAO,CAACK,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,OAAO;QAACqC,OAAO,EAAE,KAAK;QAAE9B,OAAO,EAAE,YAAYP,KAAK,CAACO,OAAO;MAAE,CAAC;IAC/D,CAAC,CAAC;EACN;AACF,CAAC;;AAED;AACA,eAAe;EACbgC,QAAQ,EAAE/B,WAAW;EACrBgC,SAAS,EAAEnB,YAAY;EACvBoB,QAAQ,EAAEZ,WAAW;EACrBa,KAAK,EAAEX;AACT,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}